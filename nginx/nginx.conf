events {
    worker_connections 1024;
}

http {
    upstream backend {
        server app_blue:3000 max_fails=2 fail_timeout=5s;
        server app_green:3000 backup;
    }

    # Custom log format to track upstream responses
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream: $upstream_addr status: $upstream_status '
                    'response_time: $upstream_response_time';

    access_log /var/log/nginx/access.log main;

    server {
        listen 80;
        
        # Proxy settings
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Don't strip any headers
        proxy_pass_header Server;
        proxy_pass_header X-App-Pool;
        proxy_pass_header X-Release-Id;

        # Timeout configurations for fast failure detection
        proxy_connect_timeout 2s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;

        # Retry configuration - crucial for auto-failover
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_next_upstream_timeout 10s;
        proxy_next_upstream_tries 2;

        location / {
            proxy_pass http://backend;
        }

        # Health check endpoint for nginx
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
